
Variable
=================
Name of storage

declare 
==========
datatype varname;
int x;

Initialize
=================
varname=data
x=90;

int x=90;

Types of variable
======================
1.Local variable
====================
variable declare inside a method
scope: within a method only
memory allocated: at the time of method execution
memory deallocated: After method executed


2.Instance variable
========================
any variable declare inside class and outside any function/constructor/block

Scope: With a Object

Memory allocate: At the time of object creation
Memory deallocate: Once object destroyed

Note:
============
For every new object instance variable get the new memory

3.static variable
=========================
Static keyword plays important role in Java
static keyword used to proper memory management
static-->variable/method/static block 

any variable declare inside class and outside
      any function/constructor/block using static keyword


Scope: Within a Class
Memory allocate: At the time of class loading
Memory deallocate: Once the class unlloaded

Note:
===============
Static variable get the memory one time and it can be used with multiple 
time object.
To call static data we dont need any object created

Automation: to create special utility(Reusable code)


======================================================
Methods in Java
======================
1.Instance method
=======================
Any method declared without static keyword
To call instance method we need Object

Memory will allocate within object

2.static method
======================
Any method declared with static keyword

call
===========
1. In same class without object and without class name you can call
2. In different class call static method using classname
==============================================================
Static block
=================
In Java to initialize static variables we need static block
static block will always execute first

static
{

}

===========================================================
DataTypes
=================
1.Primitive
==================
int ,byt,short,long,boolean,char,float,double

2.NonPrimitive
========================
class
Object

String class
array Object
Arrays class


========================================================
28-07-2024
================
Type Casting
====================
Conversion of one type of data into another type
1.primitive to primitive
===========================
 1.Implicit casting (Automatic casting-JVM)
 
 2.Explicit Casting(force full)
 
 
 Wrapper class
 ====================
 Using Wrapper class we can store primitive data as Object
 
 primitive			wrapper
 ===========		============
 int				Integer
 byte				Byte
 float				Float
 boolean			Boolean
 short				Short
 char				Character
 long				Long
 double				Double
 
 
 
 
 
 
2.Object to Primitive

3.Primitive to Object
 
===========================================
4-08-2024
=====================

Parametrization in Methods
=============================
To create dynamic method we need to pass parameters to method

1.Compile parameter passing

2.Run time parameter passing/Accept data from user
----------------------------
Scanner class

Ways
===========
Parameter passing without return keyword

Parameter passing with return

Call By value  Vs Call By reference


This Keyword
============

Method Chaining/Builder pattern
=================================


/*
	 * Polymorphism
	 * ================
	 * One thing in many form
	 * 
	 * purpose:
	 * Method Reusability
	 * Types
	 * ===========
	 * 1.Compile time Polymorphism(Method Overloading)
	 * 2.Run time Polymorphism(Method Overriding)
	 * 
	 * Method Reusability
	 *-----------------------
	 *In java if you declare same name method with different signature 
	 *then it is called Method overloading
	 *Rules
	 *-----
	 *1.Number of arguments
	 *2.Types of arguments
	 *3.Change the order of arguments
	 *
	 * 
	 * 
	 * 
	 */


===============================================
24-08-2024
=================
Array
============
Array is static data structure
Array implemented in java as Object
Array is collection of Similar data types/Objects

Array doesn't support any method

Ways
============
1.Using new keyword
2.Using literal

Types
============
1.Single Dimensional 
2.Multi Dimensional 

Syntax:
================
1.Using new keyword

datatype arryvariablename[]=new datatype[size];

int sid[]=new int[5];

array stores the element as per index value
array index always starts with 0


Syntax for multi dimensional
====================================
datatype arrname[][]=new datatype[size of row][size of cell];



==================================================
25-08-2024
=================
1.Encapsulation
=====================
It is wrapping of data and function together
Main purpose of encapsulation is data hiding/data security
In Java we can declare variable as private and we can declare method as public
using getters and setters

2.Polymorphism
=======================
	 * One thing in many form
	 * 
	 * purpose:
	 * Method Reusability
	 
	 * Types
	 * ===========
	 * 1.Compile time Polymorphism(Method Overloading)
	 * 2.Run time Polymorphism(Method Overriding)
	 * 
	 * Method Reusability
	 *-----------------------
	 *In java if you declare same name method with different signature 
	 *then it is called Method overloading
	 *Rules
	 *-----
	 *1.Number of arguments
	 *2.Types of arguments
	 *3.Change the order of arguments
	 *
	 * 

Topic to be complete....
============================
1.Constructor overloading
2.main() overloading
3.Real time scenarios


====================================================
31-08-2024
===================
Inheritance
=================
One class can access properties of another class is called Inheritance
Parent class can access only parent properties
Child class can access Parent + child properties

In Java Object is super class

Types:
========
1.Single level
2.Multi level
3.Hierarchical 
4.Multiple inheritance
5.Hybrid

Multiple and Hybrid we can't implement directly in Java
For this we have solution that is Interface.

Purpose
==============
1.To avoid code duplication
2.To Reuse Methods
3.To achieve Run time polymorphism


Run time Polymorphism
============================
Whenever we declare same method name with same syntax in Parent 
and child class the parent class method always override by child class

Method Overriding
=========================
1.Classes must be in IS -A relation
2.method should have same name
3.Method should have same number of argument and same type of argument

Keywords
==============
1.super
-======
super keyword will help you to access any variable,method and constructor from immediate 
parent

2.final
================
1.final keyword to variable when we apply no one can change the data(fixed)
2.final to method means no one can override that method
3.final to class means no class can become subclass of final class

How to design any immutable class like String
==============================================
Using final keyword


AccessModifier
===================
protected

====================================================
Data Abstraction
=========================
We can hide internal mechanism of software from the user and we can provide
only relevant features to user

Purpose:
==============
Data/Information Hiding

How To achieve In Java
==============================
1.Abstract class
=========================
- partial abstraction

What is abstract class
==========================
A class declare with abstract keyword is class

Abstract class can have implemented and non implemented(abstract) metod

Any method design without body is called abstract method and in java
we declare using abstract keyword

Abstract is not fully implemnted so we cant create object of abstract class

From abstract class any method has to be implement by child class
So using child object we can access everything from Abstract class


2.Interface
===================
- 100% abstraction
It is special class It can have data which is static and final
all the methods are by default public and abstract



==============================
Difference between Collection and Collections
------------------------------------------
Collection is interface
Collections is a class which has all static method










































 
 
 
 







Git & Github














































